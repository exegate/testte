{"version":3,"sources":["components/Login.js","components/Registration.js","components/ForgetPassword.js","components/FgSuccessful.js","components/LgSuccessful.js","App.js","serviceWorker.js","index.js"],"names":["Login","state","login","password","fingerprint","getBrowserFingerprint","enter","fetch","method","headers","body","JSON","stringify","then","response","json","resp","console","log","window","location","href","catch","err","onChangeLogin","event","input","target","value","setState","onChangePassword","className","Label","Input","onChange","e","this","placeholder","Button","color","size","outline","onClick","Component","Registration","email","password2","username","register","onChangeEmail","onChangePassword2","onChangeUsername","Forgetpassword","props","forget","successful","FgSuccessful","LgSuccessful","App","exact","path","React","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.81c5706d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { Input, Label, Button } from 'reactstrap'\r\n\r\nimport getBrowserFingerprint from 'get-browser-fingerprint';\r\n\r\nimport '../assets/css/Login.css'\r\n\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        login: '',\r\n        password: '',\r\n        fingerprint: getBrowserFingerprint()\r\n    }\r\n\r\n    enter = () => {\r\n        fetch('http://localhost:5000/login', {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                login: this.state.login,\r\n                password: this.state.password,\r\n                fingerprint: this.state.fingerprint\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(resp => {\r\n            console.log(resp)\r\n            window.location.href = '/lg_successful'\r\n        })\r\n        .catch(err => console.log('ERROR! ' + err))\r\n    }\r\n\r\n    onChangeLogin = event => {\r\n        let input = event.target.value;\r\n        this.setState({\r\n            login: input\r\n        })\r\n    }\r\n\r\n    onChangePassword = event => {\r\n        let input = event.target.value;\r\n        this.setState({\r\n            password: input\r\n        })\r\n    }\r\n    \r\n\r\n    render() {\r\n        return(\r\n            <div className=\"login\">\r\n                <div className=\"login_inputs\">\r\n                    <div className=\"login_login\">\r\n                        <Label>Логин</Label>\r\n                        <Input onChange={e => this.onChangeLogin(e)} value={this.state.login} placeholder='Логин'/>\r\n                    </div>\r\n                    <div className=\"login_password\">\r\n                        <Label>Пароль</Label>\r\n                        <Input onChange={e => this.onChangePassword(e)} value={this.state.password} placeholder='Пароль'/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"login_enter\">\r\n                    <Button color='primary' size=\"lg\" outline onClick={this.enter}>Войти</Button>\r\n                </div>\r\n                <div className=\"login_buttons\">\r\n                    <Button color='primary' outline href=\"/registration\">Регистрация</Button>\r\n                    <Button color='primary' outline href=\"/forgetpassword\">Забыли пароль</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login","import React, { Component } from 'react';\r\n\r\nimport { Input, Label, Button } from 'reactstrap'\r\n\r\nimport '../assets/css/Registration.css'\r\n\r\n\r\nclass Registration extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        password2: '',\r\n        login: '',\r\n        username: ''\r\n    }\r\n\r\n    register = () => {\r\n        fetch('http://localhost:5000/registration', {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n                login: this.state.login,\r\n                username: this.state.username\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(resp => {\r\n            console.log(resp)\r\n            window.location.href = '/login'\r\n        })\r\n        .catch(err => console.log('ERROR! ' + err))\r\n    }\r\n\r\n    onChangeEmail = event => {\r\n        let input = event.target.value;\r\n        this.setState({\r\n            email: input\r\n        })\r\n    }\r\n\r\n    onChangePassword = event => {\r\n        let input = event.target.value;\r\n        this.setState({\r\n            password: input\r\n        })\r\n    }\r\n\r\n    onChangePassword2 = event => {\r\n        let input = event.target.value;\r\n        this.setState({\r\n            password2: input\r\n        })\r\n    }\r\n\r\n    onChangeLogin = event => {\r\n        let input = event.target.value;\r\n        this.setState({\r\n            login: input\r\n        })\r\n    }\r\n\r\n    onChangeUsername = event => {\r\n        let input = event.target.value;\r\n        this.setState({\r\n            username: input\r\n        })\r\n    }\r\n    \r\n\r\n    render() {\r\n        return(\r\n            <div className=\"registration\">\r\n                <div className=\"registration_inputs\">\r\n                    <div className=\"registration_email\">\r\n                        <Label>Email`</Label>\r\n                        <Input onChange={e => this.onChangeEmail(e)} value={this.state.email} placeholder='Email'/>\r\n                    </div>\r\n                    <div className=\"registration_password\">\r\n                        <Label>Пароль</Label>\r\n                        <Input onChange={e => this.onChangePassword(e)} value={this.state.password} placeholder='Пароль'/>\r\n                    </div>\r\n                    <div className=\"registration_password2\">\r\n                        <Label>Подтвердите пароль</Label>\r\n                        <Input onChange={e => this.onChangePassword2(e)} value={this.state.password2} placeholder='Подтвердите пароль'/>\r\n                    </div>\r\n                    <div className=\"registration_login\">\r\n                        <Label>Логин</Label>\r\n                        <Input onChange={e => this.onChangeLogin(e)} value={this.state.login} placeholder='Логин'/>\r\n                    </div>\r\n                    <div className=\"registration_username\">\r\n                        <Label>Username</Label>\r\n                        <Input onChange={e => this.onChangeUsername(e)} value={this.state.username} placeholder='Username'/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"registration_register\">\r\n                    <Button color='primary' size=\"lg\" outline onClick={this.register}>Зарегистрироваться</Button>\r\n                </div>\r\n                <div className=\"registration_login\">\r\n                    <Button color='primary' outline href=\"/login\">Войти</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Registration","import React, { Component } from 'react';\r\n\r\nimport { Input, Label, Button } from 'reactstrap'\r\n\r\nimport '../assets/css/ForgetPassword.css'\r\n\r\n\r\nclass Forgetpassword extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            email: '',\r\n            successful: false\r\n        }\r\n    }\r\n\r\n    forget = () => {\r\n        fetch('http://localhost:5000/forgetpassword', {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                email: this.state.email\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(resp => {\r\n            console.log(resp)\r\n            window.location.href = '/fg_successful'\r\n        })\r\n        .catch(err => console.log('ERROR! ' + err))\r\n    }\r\n\r\n    onChangeEmail = event => {\r\n        let input = event.target.value;\r\n        this.setState({\r\n            email: input\r\n        })\r\n    }\r\n    \r\n\r\n    render() {\r\n        return(\r\n            <div className=\"forgetpassword\">\r\n                <div className=\"forgetpassword_inputs\">\r\n                    <div className=\"forgetpassword_email\">\r\n                        <Label>Email</Label>\r\n                        <Input onChange={e => this.onChangeEmail(e)} value={this.state.email} placeholder='Email'/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"forgetpassword_forget\">\r\n                    <Button color='primary' size=\"lg\" outline onClick={this.forget}>Восстановить</Button>\r\n                </div>\r\n                <div className=\"forgetpassword_buttons\">\r\n                    <Button color='primary' outline href=\"/login\">Логин</Button>\r\n                    <Button color='primary' outline href=\"/registration\">Регистрация</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Forgetpassword","import React, { Component } from 'react';\r\n\r\nimport { Button } from 'reactstrap'\r\n\r\nimport '../assets/css/fgsuccessful.css'\r\n\r\nclass FgSuccessful extends Component {\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"fgsuccessful\">\r\n                Запрос на смену пароля успешно отправлен\r\n                <div className=\"fgsuccessful_button\">\r\n                    <Button color='primary' outline href=\"login\">Войти</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FgSuccessful","import React, { Component } from 'react';\r\n\r\nimport { Button } from 'reactstrap'\r\n\r\nimport '../assets/css/fgsuccessful.css'\r\n\r\nclass LgSuccessful extends Component {\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"fgsuccessful\">\r\n                Успешно вошли\r\n                <div className=\"fgsuccessful_button\">\r\n                    <Button color='primary' outline href=\"login\">Выйти</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LgSuccessful","/* React */\nimport React from 'react';\n\n/* Components */\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\n\n/* My components */\nimport Login from './components/Login'\nimport Registration from './components/Registration'\nimport Forgetpassword from './components/ForgetPassword';\nimport FgSuccessful from './components/FgSuccessful';\nimport LgSuccessful from './components/LgSuccessful';\n\n/* Css */\nimport './assets/css/App.css';\n\nclass App extends React.Component {\n    state = {\n        \n    }\n    render() {\n        return(\n            <Router>\n                <div className=\"App\">\n                    {this.state.fingerprint}\n                    <Switch>\n                        <Route exact path=\"/\">\n                            <a href='/login'>Sasa</a>\n                        </Route>\n                        <Route path=\"/login\">\n                            <Login/>\n                        </Route>\n                        <Route path=\"/registration\">\n                            <Registration/>\n                        </Route>\n                        <Route path=\"/forgetpassword\">\n                            <Forgetpassword/>\n                        </Route>\n                        <Route path=\"/fg_successful\">\n                            <FgSuccessful/>\n                        </Route>\n                        <Route path=\"/lg_successful\">\n                            <LgSuccessful/>\n                        </Route>\n                    </Switch>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* React */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n/* Components */\nimport App from './App';\n\n/* Css */\nimport './assets/css/index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n\n    <App />\n\n, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}